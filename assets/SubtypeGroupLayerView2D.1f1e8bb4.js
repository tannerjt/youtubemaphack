import{$ as o,a1 as n,R as p,S as y,r as m,cK as u}from"./index.768d9708.js";import d from"./FeatureLayerView2D.3f1b1ad5.js";import"./utils.d36871b7.js";import"./Utils.930ec63b.js";import"./enums.6e42a319.js";import"./enums.de935fa5.js";import"./Texture.d4016723.js";import"./VertexElementDescriptor.d386088d.js";import"./MaterialKey.128409d6.js";import"./LayerView.5bfe681f.js";import"./schemaUtils.ddd4c0d4.js";import"./visualVariablesUtils.bc746b61.js";import"./createSymbolSchema.ca75ca22.js";import"./CIMSymbolHelper.1df5f911.js";import"./BidiEngine.ec67919b.js";import"./GeometryUtils.814cb798.js";import"./ExpandedCIM.1dc04cac.js";import"./quantizationUtils.a0dceab2.js";import"./MD5.97b39efc.js";import"./util.c20b8269.js";import"./floorFilterUtils.69500d62.js";import"./popupUtils.c9332e0d.js";import"./RefreshableLayerView.5a00c3bd.js";function h(e,r){return!e.visible||e.minScale!==0&&r>e.minScale||e.maxScale!==0&&r<e.maxScale}let l=class extends d{initialize(){this.handles.add([p(()=>{var e;return(e=this.view)==null?void 0:e.viewpoint},()=>this._update(),y)])}_injectOverrides(e){let r=super._injectOverrides(e);const s=this.view.scale,t=this.layer.sublayers.filter(a=>h(a,s)).map(a=>a.subtypeCode);if(!t.length)return r;r=m(r)?r:new u().toJSON();const i=`NOT ${this.layer.subtypeField} IN (${t.join(",")})`;return r.where=r.where?`(${r.where}) AND (${i})`:i,r}_setLayersForFeature(e){const r=this.layer.fieldsIndex.get(this.layer.subtypeField),s=e.attributes[r.name],t=this.layer.sublayers.find(i=>i.subtypeCode===s);e.layer=t,e.sourceLayer=this.layer}_createSchemaConfig(){const e={subtypeField:this.layer.subtypeField,sublayers:Array.from(this.layer.sublayers).map(i=>({featureReduction:null,geometryType:this.layer.geometryType,labelingInfo:i.labelingInfo,labelsVisible:i.labelsVisible,renderer:i.renderer,subtypeCode:i.subtypeCode,orderBy:null}))},r=this.layer.sublayers.map(i=>i.subtypeCode).join(","),s=this.layer.sublayers.length?`${this.layer.subtypeField} IN (${r})`:"1=2";let t=this.layer.definitionExpression?this.layer.definitionExpression+" AND ":"";return t+=s,{...super._createSchemaConfig(),...e,definitionExpression:t}}};l=o([n("esri.views.2d.layers.SubtypeGroupLayerView2D")],l);const R=l;export{R as default};
